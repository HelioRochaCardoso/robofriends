{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/DialogSlide.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","toggle","className","onClick","alt","src","CardList","robots","toggleModal","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Transition","React","forwardRef","ref","Slide","direction","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","flexDirection","padding","spacing","paper","backgroundColor","borderRadius","DialogSlide","onOpen","onClose","robotInfo","showRobot","classes","useState","setOpen","username","website","phone","address","city","zipcode","company","catchPhrase","companyName","handleClose","isEmpty","Fragment","Dialog","open","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogContent","Typography","variant","listStyle","Button","color","setRobotID","number","payload","parseInt","modalToToggle","bool","App","onRequestRobots","searchField","onSearchChange","onChangeRobot","onHideModal","isPending","robotID","showModal","filteredRobots","filter","toLowerCase","includes","robotToToggle","connect","searchRobots","requestRobots","robotSelected","dispatch","event","target","value","fetch","then","response","json","users","catch","currentTarget","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","initialStateRobotID","initialShowModal","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.77135e95.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id, toggle}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' onClick={toggle} id={id}>\r\n\t\t\t<img alt='robot' src={`https://robohash.org//${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots, toggleModal}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={robots[i].id}\r\n\t\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\ttoggle={toggleModal}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n  \t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robot'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops, that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      flexDirection: 'column',\r\n      padding: theme.spacing(0, 2, 0, 2),\r\n    },\r\n    paper: {\r\n      backgroundColor: 'white',\r\n      borderRadius: '5px',\r\n      padding: theme.spacing(2, 4, 2),\r\n    }\r\n  }));\r\n\r\nexport default function DialogSlide(props) {\r\n    const { onOpen, onClose } = props;\r\n    let robotInfo = props.showRobot || {};\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(onOpen);\r\n\r\n    const {\r\n        id, name, \r\n        username = 'No username available', \r\n        email = 'No email available', \r\n        website = 'No website available', \r\n        phone = 'No phone available',\r\n        address: { city, zipcode } = { city: 'No city available', zipcode: 'No zipcode available' },\r\n        company: { catchPhrase, name: companyName = 'No company name available' } = { catchPhrase: 'No motto available' }\r\n    } = robotInfo;\r\n\r\n    const handleClose = () => {\r\n        setOpen(onClose);\r\n    };\r\n\r\n    return isEmpty(robotInfo) ? null : (\r\n        <React.Fragment>\r\n            <Dialog\r\n                open={onOpen}\r\n                TransitionComponent={Transition}\r\n                className={classes.modal}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogContent className={classes.paper}>\r\n                    <img alt='robot' src={`https://robohash.org//${id}?200x200`}/>\r\n                    <Typography variant=\"h4\">{name}</Typography>\r\n                        <ul style={{listStyle: 'none'}}>\r\n                            <li><strong>Username:</strong> <i>{username}</i></li>\r\n                            <li><strong>Email:</strong> <i>{email}</i></li>\r\n                            <li><strong>Phone:</strong> <i>{phone}</i></li>\r\n                            <li><strong>Website:</strong> <i>{website}</i></li>\r\n                            <li><strong>City:</strong> <i>{city}</i></li>\r\n                            <li><strong>Company:</strong> <i>{companyName}</i></li>\r\n                            <li><strong>Motto:</strong> <i>{catchPhrase}</i></li>\r\n                            <li><strong>Zip Code:</strong> <i>{zipcode}</i></li>\r\n                        </ul>\r\n                </DialogContent>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    CHANGE_ROBOT_ID,\r\n    SHOW_MODAL,\r\n    HIDE_MODAL\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\nexport const setRobotID = (number) => {\r\n    return {\r\n        type: CHANGE_ROBOT_ID,\r\n        payload: parseInt(number)\r\n    }\r\n}\r\n\r\nexport const modalToToggle = (bool) => {\r\n    let type = '';\r\n    bool ? type = SHOW_MODAL : type = HIDE_MODAL;\r\n    return {\r\n        type: type,\r\n        payload: bool\r\n    }\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\nexport const CHANGE_ROBOT_ID = 'CHANGE_ROBOT_ID';\r\nexport const SHOW_MODAL = 'SHOW_MODAL';\r\nexport const HIDE_MODAL = 'HIDE_MODAL';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport DialogSlide from '../components/DialogSlide';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots, setRobotID, modalToToggle } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    robotID: state.robotSelected.robotID,\r\n    showModal: state.toggleModal.showModal\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n    onChangeRobot: (event) => {\r\n      dispatch(modalToToggle(true));\r\n      dispatch(setRobotID(event.currentTarget.id));\r\n    },\r\n    onHideModal: () => {\r\n      dispatch(modalToToggle(false));\r\n      dispatch(setRobotID(-1));\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, onChangeRobot, onHideModal, robots, isPending, robotID, showModal } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    let robotToToggle = robots[robotID - 1];\r\n    return isPending ?\r\n      <h1 className='tc'>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <DialogSlide showRobot={robotToToggle} onOpen={showModal} onClose={onHideModal} />\r\n              <CardList robots={filteredRobots} toggleModal={onChangeRobot} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    CHANGE_ROBOT_ID,\r\n    SHOW_MODAL,\r\n    HIDE_MODAL\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobotID = {\r\n    robotID: -1\r\n}\r\n\r\nexport const robotSelected = (state=initialStateRobotID, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_ROBOT_ID:\r\n            return Object.assign({}, state, { robotID: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialShowModal = {\r\n    showModal: false\r\n}\r\n\r\nexport const toggleModal = (state=initialShowModal, action={}) => {\r\n    switch(action.type) {\r\n        case SHOW_MODAL:\r\n            return Object.assign({}, state, { showModal: true });\r\n        case HIDE_MODAL:\r\n            return Object.assign({}, state, { showModal: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport { searchRobots, requestRobots, robotSelected, toggleModal } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots, robotSelected, toggleModal });\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}