{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Modal.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","toggle","className","onClick","alt","src","CardList","robots","toggleModal","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Modal","handleClose","showHideClassName","show","robotInfo","showRobot","username","website","phone","address","addressCity","city","zipcode","company","catchPhrase","companyName","App","onSearchChange","event","searchField","target","value","onToggleModal","onShowModal","robotID","currentTarget","showModal","onHideModal","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","robotToToggle","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8b586872.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id, toggle}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' onClick={toggle} id={id}>\r\n\t\t\t<img alt='robot' src={`https://robohash.org//${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots, toggleModal}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={robots[i].id}\r\n\t\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\ttoggle={toggleModal}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n  \t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robot'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops, that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\n\r\nconst Modal = ({ handleClose, show, showRobot }) => {\r\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n    let robotInfo = showRobot || {};\r\n    const {\r\n        name, username, email, website, phone,\r\n        address: {city: addressCity} = {addressCity: 'No available city'},\r\n        address: {zipcode} = {zipcode: 'No zipcode available'},\r\n        company: {catchPhrase} = {catchPhrase: 'No catch phrase available'},\r\n        company: {name: companyName} = {companyName: 'No company name available'},\r\n    } = robotInfo;\r\n\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className=\"modal-main\">\r\n                <p><i>Name: <strong>{name}</strong></i></p>\r\n                <p><i>Username: <strong>{username}</strong></i></p>\r\n                <p><i>Email: <strong>{email}</strong></i></p>\r\n                <p><i>Phone: <strong>{phone}</strong></i></p>\r\n                <p><i>Website: <strong>{website}</strong></i></p>\r\n                <p><i>City: <strong>{addressCity}</strong></i></p>\r\n                <p><i>Company: <strong>{companyName}</strong></i></p>\r\n                <p><i>Motto: <strong>{catchPhrase}</strong></i></p>\r\n                <p><i>Zip Code: <strong>{zipcode}</strong></i></p>\r\n                <button className=\"close\" onClick={handleClose}>\r\n                    Close &times;\r\n                </button>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Modal from '../components/Modal';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n            showModal: false,\r\n            robotID: -1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ 'robots': users }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    onToggleModal = (event) => {\r\n        this.onShowModal();\r\n        this.setState({\r\n            robotID: event.currentTarget.id\r\n        });\r\n    }\r\n\r\n    onShowModal = () => {\r\n        this.setState({ showModal: true });\r\n    };\r\n    \r\n    onHideModal = () => {\r\n        this.setState({ showModal: false });\r\n    };\r\n\r\n    render() {\r\n    \tconst {robots, searchField, robotID} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        let robotToToggle = robots[robotID-1];\r\n        return !robots.length ?\r\n            <h1 className='tc'>Loading</h1> :\r\n            (\r\n            \t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} toggleModal={this.onToggleModal}/>\r\n                            <Modal show={this.state.showModal} showRobot={robotToToggle} handleClose={this.onHideModal}/>\r\n                        </ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}